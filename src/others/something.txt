// import {createSlice} from "@reduxjs/toolkit";
// import { loginType } from "../types";
//
//
// const initialState : loginType= {
//     user_id : null
// }
//
//
//
//
//
// const login = createSlice({
//     name : 'login',
//     initialState,
//     reducers: {
//
//     }
// })
//
//
//
// export default login.reducer

// import {configureStore} from "@reduxjs/toolkit";
// import userDataReducer from "./reducers/userDataReducer";
//
// const store = configureStore({
//     reducer : {
//         login : userDataReducer
//     }
// })
//
// export type StateType = ReturnType<typeof store.getState>
//
// export type globalDispatch = ReturnType<typeof store.dispatch>
//
//
// export default store



C:\Program Files\MongoDB\Server\4.4\bin


http://localhost:6868/static/thumb-1920-472498.jpg


сделать нормальную валидаци.



           {/*<InputWrapper>*/}
                {/*<Input type="text" name={'email'} onChange={formik.handleChange('email')}*/}
                {/*       value={formik.values['email']}*/}
                {/*       onBlur={formik.handleBlur} autoComplete={'off'} ref={emailInputRef}*/}
                {/*isPassword={false}/>*/}
                {/*       /!*@ts-ignore*!/*/}
                {/*{formik.values.email ? null :   <InputPlaceholder*/}
                {/*    onClick={() => {emailInputRef.current?.focus()}} >Email</InputPlaceholder>}*/}

            {/*<Error message={formik.errors.email}/>*/}

            {/*</InputWrapper>*/}


// <InputWrapper>
//     <Input type={'text'} name={'password'} onChange={formik.handleChange('password')}
//            value={formik.values['password']}
//            onBlur={formik.handleBlur} autoComplete={'off'} ref={passwordInputRef}
//            isPassword={!isPasswordOpened}/>
//     {formik.values.password ? null :   <InputPlaceholder onClick={() => {passwordInputRef.current?.focus()}}>Password</InputPlaceholder>}
//     {formik.errors.password ? <Error message={formik.errors.password}/> :<EyeIconWrapper onClick={() => {
//         switchInputPassType(!isPasswordOpened)
//     }}>
//         {isPasswordOpened ? <BsEyeSlashFill/> : <BsEyeFill/> }
//     </EyeIconWrapper> }
//
// </InputWrapper>




 <span>current password: {currentPassword}</span>
        <Input value={values.nextPassword} onChange={handleChange} name={'nextPassword'}/>
        <Input value={values.repeatPassword} onChange={handleChange} name={'repeatPassword'}/>
        {/*@ts-ignore*/}
        <button type={'submit'} onClick={handleSubmit}>submit changes</button>
        {errors.nextPassword}
        {errors.repeatPassword}
